- if record.invited_by
  = f.input :invited_by do
    i.icon class=model_icon_key(User)
    - if policy(record.invited_by).edit?
      a href=edit_admin_user_path(record.invited_by) target='_blank' = record.invited_by.name
    - else
      = record.invited_by.name

    ul.hint
      - if record.invitation_sent_at.present?
        li #{User.human_attribute_name(:invitation_sent_at)} #{record.invitation_sent_at.to_s(:long)}
      - if record.invitation_accepted_at.present?
        li #{User.human_attribute_name(:invitation_accepted_at)} #{record.invitation_accepted_at.to_s(:long)}

= f.input :name
= f.input :email, as: :email
= f.input :preferred_language, selected: current_user.preferred_language,
                               collection: Rails.configuration.admin_locales.collect { |l| [language_name(l), l] },
                               hint: translate('admin.hints.preferred_language')

- if current_user != f.object
  - selected_languages_access = (@record.languages_access unless @record.languages_access == current_user.accessible_locales)
  = f.input :languages_access, selected: selected_languages_access,
                               collection: current_user.accessible_locales.collect { |l| [language_name(l), l] },
                               hint: translate('admin.hints.languages_access'),
                               prompt: translate('admin.misc.locale.all_languages'),
                               input_html: { multiple: true }

  // If there are languages that are known by this user, but not selectable, we need to display those
  - other_languages = (@record.accessible_locales - current_user.accessible_locales)
  - if other_languages.present?
    - other_languages = other_languages.map { |lang| language_name(lang) }.join(', ')
    .hint #{translate('admin.misc.locale.other_languages')}: #{other_languages}

  = f.input :languages_known, collection: I18n.available_locales.collect { |l| [language_name(l), l] },
                              hint: translate('admin.hints.languages_known'),
                              prompt: translate('admin.misc.locale.no_languages'),
                              input_html: { multiple: true }

  = f.input :role, collection: @assignable_roles.map { |k, _| [human_enum_name(User, :role, k), k] }

  ul.hint
    - User.roles.keys.each do |role|
      li
        strong = human_enum_name(User, :role, role)
        '  -
        = translate(role, scope: %i[admin permissions role_description])
- else
  = f.input :languages_access do
    - if record.can_access_all_locales?
      = translate('admin.misc.locale.all_languages')
    - else
      = record.languages_access.map { |lang| language_name(lang) }.join(', ')

  = f.input :languages_known do
    - if record.languages_known.present?
      = record.languages_known.map { |lang| language_name(lang) }.join(', ')
    - else
      = translate('admin.misc.locale.no_languages')

  .ui.divider

  .ui.small.icon.message
    i.user.icon
    .content
      .header
        = human_attribute_name(record, :role)
        ' : 
        = human_enum_name(record, :role)
      .description = translate(record.role, scope: %i[admin permissions role_description]).sub(/^./, &:upcase)

  .ui.hidden.divider

table.ui.definition.table
  thead
    tr
      th = translate('admin.permissions.title')
      - User.roles.keys.each do |role|
          th = human_enum_name(User, :role, role)
  tbody = permissions_matrix User.roles.keys

.ui.message = translate('admin.permissions.own_languages_notice')

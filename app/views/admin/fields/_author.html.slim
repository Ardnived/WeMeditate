
- allow = policy(record)

- if record.user.present?
  .ui.icon.message
    i.question.circle.icon
    .content
      .header = translate('admin.tutorial.show.title')
      .message
        = simple_format translate('admin.tutorial.show.message.my_author')

- if record.user == current_user && record.new_record?
  .ui.info.message = translate('admin.messages.new_author_notice')


= f.input :name, disabled: !allow.update_structure?, input_html: { value: (record.name || record.user&.name) }

- if allow.update_structure?
  = f.input :country_code, collection: countries.invert.to_a, input_html: { class: 'search' }

= f.input :title
= f.input :description, as: :text

- if allow.update_structure?
  = f.input :image, as: :file, wrapper: :semantic_file, icon: file_type_icon(:image), file: record.image, input_html: { accept: file_type_accepts(:image) }
- if record.image.present?
  .preview-item = image_tag record.image.url(:medium), class: 'ui circular image'

- if allow.update_structure?
  = f.input :years_meditating

- if record.user.present?
  = f.input :user do
    - if policy(record.user).edit?
      a.ui.icon.label.link href=edit_admin_user_path(record.user) target='_blank'
        i.icon class=model_icon_key(User)
        span = record.user.name
    - else
      .ui.icon.label
        i.icon class=model_icon_key(User)
        = record.user.name

    - if record.new_record?
      = f.input_field :user_id, as: :hidden
- elsif allow.update_structure?
  = f.association :user, collection: User.includes(:author).where(authors: { id: nil }), input_html: { class: 'clearable' }

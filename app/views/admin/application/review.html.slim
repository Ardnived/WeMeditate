
- allow = policy(@record)
- content_for :title, t('action.target.review', target: @record.model_name.human)

.ui.message Changes were contibuted by X, Y, Z

= simple_form_for @record, url: url_for([:approve, :admin, @record]), method: :patch
  / TODO: Translate
  h3 #{@model.model_name.human} Detail Changes

  - if @record.draft.except('content').empty?
    | None
  - else
    table.ui.compact.celled.definition.review.table
      thead
        tr
          th Approve?
          th Field
          th Old Value
          th New Value
      tbody
        - @record.draft.each do |key, value|
          - next if key == 'content'
          - field_name = human_attribute_name(@model, key)
          - old_value = @record[key]
          tr.modified
            td.collapsing
              .ui.fitted.slider.checked.checkbox
                input type='checkbox' name="approve[]" value=key checked=true
                label
            - case key
              - when 'vimeo_id'
                td.collapsing = field_name
                td
                  a href="https://vimeo.com/#{old_value}" target='_blank'
                    i.external.alternate.icon
                    = old_value
                td
                  a href="https://vimeo.com/#{value}" target='_blank'
                    i.external.alternate.icon
                    = value
              - when 'thumbnail_id', 'image_id'
                td.collapsing = human_attribute_name(@model, key.delete_suffix('_id'))
                td
                  .ui.image
                    img src=MediaFile.find(old_value).file.url(:tiny)
                    .ui.floating.label = "##{old_value}"
                td
                  .ui.image
                    img src=MediaFile.find(value).file.url(:tiny)
                    .ui.floating.label = "##{value}"
              - else
                td.collapsing = field_name
                td = old_value
                td = value.is_a?(String) ? Differ.diff_by_char(value, old_value.to_s).format_as(:html).html_safe : value
      tfoot.full-width
        tr
          / TODO: Translate
          th colspan=4
            .ui.compact.basic.negative.tiny.button
              | Reject All
            .ui.compact.basic.positive.tiny.button
              | Approve All

  / TODO: Translate
  h3 #{@model.model_name.human} Content Changes

  - if !@record.draft['content'].present?
    | None
  - else
    table.ui.compact.celled.definition.review.table
      thead
        tr
          th Approve?
          th Block
          th Data
      tbody
        = draft_diff(@record) do |i, mode, original, draft, original_index, draft_index|
          - type = original ? original['type'] : draft['type']
          - value = { use: '' }
          tr class=mode
            td.collapsing
              - if mode == 'nochange'
                  input type='hidden' name="approve[content][#{i}]" value="keep:#{original_index}"
              - else
                .ui.fitted.slider.checked.checkbox
                  - if original
                    input type='hidden' name="approve[content][#{i}]" value="keep:#{original_index}"
                  input type='checkbox' name="approve[content][#{i}]" value="use:#{draft_index}" checked=true
                  label
            td.collapsing
              strong = type
              div = mode
            td.diff = Differ.diff_by_word(display_block_data(draft), display_block_data(original)).format_as(:html).html_safe
      tfoot.full-width
        tr
          / TODO: Translate
          th colspan=3
            .ui.compact.basic.negative.tiny.button
              | Reject All
            .ui.compact.basic.positive.tiny.button
              | Approve All

  .ui.hidden.divider

  p
    - if allow.show?
      a.ui.basic.button href=url_for([:admin, @record])
        i.left.arrow.icon
        = translate 'action.back'
    - else
      a.ui.basic.button href=url_for([:admin, defined?(@record.page) ? @record.page : @record.class])
        i.left.arrow.icon
        = translate 'action.target.back', target: @record.model_name.human(count: -1)

    button.ui.basic.primary.button type='submit'
      = translate 'action.publish'


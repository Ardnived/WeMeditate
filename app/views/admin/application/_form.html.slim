
- allow = policy(record)

- if record.draftable? && record.has_draft? && record.parsed_draft.except('content', 'contributors').present?
  .ui.yellow.message = translate 'admin.messages.unapproved_changes_notice', page: human_model_name(record)

- if record.is_a?(User) && record.pending_invitation?
  .ui.yellow.message = translate 'admin.messages.pending_invitation_notice', person: human_enum_name(record, :role).downcase

= simple_form_for record, url: polymorphic_admin_path([:admin, record]), html: { id: "editor-form", class: "#{'error' if record.errors.present?}", novalidate: true } do |f|
  - if record.errors.present?
    .ui.error.message
      .header = translate 'admin.messages.errors'
      ul.list
        - record.errors.full_messages.each do |message|
          li = message

  - if record.stateable?
    - states = record.avaliable_states.map { |state| [human_enum_name(record, :state, state), state.to_s] }
    - if record.published? && !record.unpublishable?
      = f.input :state do
        .ui.icon.label
          i.info.circle.icon
          = human_enum_name(record, :state)
    - elsif record.draftable?
      = draftable_field f, :state, type: :collection, input: { collection: states } do |value|
        - f.input_field :state, collection: states, selected: value, disabled: !allow.update_structure?
    - else
      = f.input :state, collection: states, disabled: !allow.update_structure?
  - elsif record.publishable? && allow.review?
    - if record.draftable?
      = draftable_publish_field f
    - elsif allow.publish?
      = f.input :published do
        = publish_input f, :published, enabled: allow.publish?

  - if record.viewable?
    - if record.draftable?
      = draftable_field f, :name
    - else
      = f.input :name

    - if record_has_fixed_slug?
      = f.input :slug do
        - path = @record.is_a?(StaticPage) ? static_page_path_for(@record) : (@record.new_record? ? "#{polymorphic_path(@record)}/#{@record.slug}" : polymorphic_path(@record))
        - url = @record.is_a?(StaticPage) ? static_page_url_for(@record) : (@record.new_record? ? "#{polymorphic_url(@record)}/#{@record.slug}" : polymorphic_url(@record))
        = record_detail 'linkify', CGI.unescape(path), url: url
        = f.hint translate('admin.hints.fixed_slug')
    - elsif record.draftable?
      / TODO: Try and improve this janky way of getting the url. It's because articles don't have an index route
      - url = record.is_a?(Article) && record.new_record? ? "/#{translate 'routes.articles'}/*" : url_for(record)
      = draftable_slug_field f, url
    - else
      - url = record.new_record? ? "/#{polymorphic_path(record.class)}/*" : polymorphic_path(record)
      - url = url.gsub(%r{\/[^\/]*\/?$}, '/') # Strip the last element from the url
      = f.input :slug do
        = content_tag :div, class: 'ui labeled slug input' do
          = tag.div CGI.unescape(url), class: 'ui basic label'
          = f.input_field :slug
        - if record.is_a?(Meditation)
          .hint = translate('admin.hints.self_realization_slug', slug: translate('routes.self_realization'))

  = render "admin/fields/#{record.model_name.param_key}", f: f, record: record

  - if record.viewable? && allow.update_structure?
    = render 'admin/partials/repeatable_fields', f: f, attribute: :metatags, horizontal: true do |ff, item|
      = ff.text_field :name, value: item[0], placeholder: translate('admin.metadata.key'), name: "#{ff.object_name}[keys][]", data: { key: 'key' }
      = ff.text_field :value, value: item[1], placeholder: translate('admin.metadata.value'), name: "#{ff.object_name}[values][]", data: { key: 'value' }

    - unless record.new_record?
      .field
        .ui.accordion#metatags
          .title
            i.dropdown.icon
            = translate 'admin.metadata.default_metadata'
          .content
            .ui.list
              - default_metatags(record).each do |key, value|
                .item
                  strong = key
                  - if value.is_a? Array
                    span = value
                  - else
                    span "#{value}"

        .ui.accordion#jsonld
          .title
            i.dropdown.icon
            = translate 'admin.metadata.generated_jsonld'
          .content
            code = JSON.pretty_generate(structured_data(record))

  - if record.respond_to?(:published) && !allow.review?
    - if record.draftable?
      = draftable_publish_field f
    - elsif allow.publish?
      = f.input :published do
        = publish_input f, :published, enabled: allow.publish?

  .ui.hidden.divider

  - if !allow.show? && !@record.new_record? && allow.destroy?
    .table-actions
      a.ui.basic.button href=polymorphic_admin_path([:admin, @record]) data={ method: 'delete', confirm: translate('admin.messages.confirm_destroy') }
        i.warning.sign.icon
        = translate 'admin.action.target.destroy', record: human_model_name(record)

  p
    - confirm = translate('admin.messages.confirm_unsaved_changes') if action_name == 'write'

    - if allow.show?
      a.ui.basic.button href=polymorphic_admin_path([:admin, record]) data-confirm=confirm
        i.left.arrow.icon
        = translate 'admin.action.simple.back'
    - elsif policy(@model).index?
      a.ui.basic.button href=polymorphic_admin_path([:admin, defined?(record.page) ? record.page : record.class]) data-confirm=confirm
        i.left.arrow.icon
        = translate 'admin.action.target.back', records: human_model_name(record, :plural)

    - if record.is_a?(User) && record.new_record?
      button.ui.basic.primary.button type='submit'
        = translate 'admin.action.simple.invite'
    - elsif record.draftable?
      button.ui.basic.positive.button type='submit' name='draft' value='true'
        = allow.publish? ? translate('admin.action.simple.save_draft') : translate('admin.action.simple.update')

      - if allow.publish? && !(record.is_a?(Article) && record.new_record?)
        button.ui.basic.primary.button type='submit'
          = translate 'admin.action.simple.update'
          '  &
          = translate 'admin.action.simple.approve'
    - else
      button.ui.basic.primary.button type='submit'
        = translate 'admin.action.simple.update'
        '  &
        = translate 'admin.action.simple.approve'

    - if record.is_a?(User) && allow.create? && record.pending_invitation?
      button.ui.basic.primary.button type='submit' name='reinvite' value='true'
        = translate 'admin.action.simple.reinvite'
      
    div#upload-loader style='display: none'
      i.notched.circle.loading.icon
      span

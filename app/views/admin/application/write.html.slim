
- content_for :title, translate('admin.action.target.write', record: @record.model_name.human)
- allow = policy(@record)
- has_draft = @record.has_draft?(:content)
- data = { upload: polymorphic_admin_path([:admin, @record, MediaFile]), triangle: image_path('graphics/triangle.svg') }

- locale = @record.translated_locales.include?(I18n.locale) && @record.content.present? ? I18n.locale : @record.original_locale
- Globalize.with_locale(locale) do
  - content = has_draft ? @record.parsed_draft_content : (@record.parsed_content || {})
  = simple_form_for @record, url: polymorphic_admin_path([:admin, @record]), html: { id: "editor-form" } do |f|
    = f.hidden_field :content, as: :hidden, id: 'content-input'

    .field class=('draft' if has_draft) data-draft='content'
      - if @record.reviewable? && has_draft && @record.parsed_draft_content.present?
        .ui.yellow.message = translate 'admin.messages.draft_notice', page: @record.model_name.human

        /= draft_reset_buttons(:content, @record.parsed_content, JSON.parse(content))
        /.clearfix

      - if @splash_style
        #splash-editor.ce-block data-style=@splash_style
          .cdx-splash.cdx-block class="cdx-splash--#{@splash_style}"
            #splash-background
              #splash-background-image
              #splash-title.cdx-input.cdx-input--title contenteditable=true data-placeholder="Enter some leading text"
              #splash-text.cdx-input.cdx-input--text contenteditable=true data-placeholder="Enter a subtitle"
              #splash-action.cdx-input.cdx-input--button contenteditable=true data-placeholder="Button Text"
              #splash-url.cdx-input.cdx-input--url contenteditable=true data-placeholder="Enter url link"

            #splash-uploader

      #content-editor data=data data-content=content.to_json

    - if @record.respond_to?(:published) && !allow.review?
      - if @record.reviewable?
        = draftable_publish_field f
      - elsif allow.publish?
        = f.input :published do
          = publish_input f, :published, enabled: allow.publish?

    p
      - if allow.show?
        a.ui.basic.button href=polymorphic_admin_path([:admin, @record]) data-confirm=translate('admin.messages.confirm_unsaved_changes')
          i.left.arrow.icon
          = translate 'admin.action.simple.back'
      - elsif policy(@model).index?
        a.ui.basic.button href=polymorphic_admin_path([:admin, defined?(@record.page) ? @record.page : @record.class]) data-confirm=translate('admin.messages.confirm_unsaved_changes')
          i.left.arrow.icon
          = translate 'admin.action.target.back', records: @record.model_name.human(count: -1)

      - if allow.publish?
        button.ui.basic.positive.button type='submit' name='draft' value='true'
          = translate 'admin.action.simple.save_draft'

        - unless @record.is_a?(Article) && @record.new_record?
          button.ui.basic.primary.button type='submit'
            = translate 'admin.action.simple.update'
            '  &
            = translate 'admin.action.simple.approve'
      - else
        button.ui.basic.positive.button type='submit'
          = translate 'admin.action.simple.update'

      div#upload-loader style='display: none'
        i.notched.circle.loading.icon
        span

/ TODO: Remove this test code
hr
- if @record.respond_to?(:media_files)
  p: code
    div Media Files:
    = @record.media_files.pluck(:id)
  p: code
    div Essential Media Files:
    = @record.essential_media_files
p: pre = @record.pretty_inspect
- @record.respond_to?(:translations) && @record.translations.each do |translation|
  p: pre = translation.pretty_inspect
p: code
  div Draft
  pre = @record.parsed_draft.pretty_inspect
p: code
  div Content
  pre = @record.parsed_content.pretty_inspect
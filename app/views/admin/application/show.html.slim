
- content_for :title, @model.model_name.human(count: 1)
- reorder = (params[:reorder] == 'true')
- model_name = @model.model_name.human(count: 1).downcase
- allow = policy(@record)

- unless reorder
  .table-actions
    .ui.tiny.compact.basic.buttons
      .ui.active.button
        - status = @record.published? ? (@record.reviewable? && @record.has_draft? ? :pending_changes : :published) : :draft
        = translate(status, scope: %i[admin status], page: model_name)

      - action = (allow.review? && @record.published? && @record.has_draft? ? :review : :edit)
      a.ui.button href=polymorphic_admin_path([action, :admin, @record])
        i.edit.icon
        - if allow.review? && @record.published? && @record.has_draft?
          = translate('admin.action.target.review', record: model_name)
        - else
          = translate('admin.action.target.edit', record: model_name)

      .ui.floating.dropdown.icon.button
        i.dropdown.icon
        .menu
          - if @record.reviewable? && @record.has_draft?
            a.item href=polymorphic_admin_path([:edit, :admin, @record])
              i.edit.icon
              = translate 'admin.action.target.edit_details', record: model_name
          - if false && @record.publishable? && allow.publish?
            / TODO: Implement click to (un)publish
            .item
              i.bullhorn.icon
              = translate (@record.published? ? 'unpublish' : 'publish'), scope: %i[admin action target], record: model_name
          - if @record.published?
            a.item href=polymorphic_url(@record) target='_blank'
              i.eye.icon
              = translate 'admin.action.descriptive.show'
          - if allow.preview? && ((@record.reviewable? && @record.has_draft?) || !@record.published?)
            a.item href=polymorphic_admin_path([:preview, :admin, @record]) target='_blank'
              i.eye.icon
              = translate 'admin.action.descriptive.preview'
          - if allow.destroy?
            a.item href=polymorphic_admin_path([:admin, @record]) data={ method: 'delete', confirm: translate('admin.messages.confirm_destroy') }
              i.warning.sign.icon
              = translate 'admin.action.target.destroy', record: model_name

.details
  h3 = @record.preview_name
  = render "admin/details/#{@record.model_name.param_key}", record: @record

  - if @record.reviewable?
    .ui.small.details.list
      = record_detail 'bullhorn', record_published_at_status if @record.respond_to? :published_at
      = record_detail 'edit', record_modified_at_status
      - if owner = @record.try(:owner)
        - owned_by = translate('admin.details.owned_by', owner: owner.name)
        - if policy(owner).edit?
          - view_user = translate('admin.action.target.show', record: User.model_name.human)
          = record_detail 'user', owned_by, view_user, url: polymorphic_admin_path([:edit, :admin, owner])
        - else
          = record_detail 'user', owned_by

.clearfix

.ui.divider

- if allow.write?
  .table-actions
    - action = @record.content.present? ? :edit_content : :write
    = table_action translate(action, scope: %i[admin action target], record: model_name), 'pencil alternate', polymorphic_admin_path([:write, :admin, @record])


h4 = translate 'admin.content.outline_title', page: @model.model_name.human

= content_outline @record

.ui.hidden.divider
= table_link translate('admin.action.target.back', records: @model.model_name.human(count: -1)), 'left arrow', polymorphic_admin_path([:admin, @model])

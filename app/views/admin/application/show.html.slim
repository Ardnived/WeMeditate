
- content_for :title, @model.model_name.human(count: 1)
- reorder = (params[:reorder] == 'true')
- model_name = @model.model_name.human(count: 1).downcase
- allow = policy(@record)

- unless reorder
  .table-actions
    /= table_action t('action.edit'), "#{'orange' if allow.publish? and @record.draft.present?} edit", url_for([:edit, :admin, @record])
    /= table_action t('action.show'), 'dashboard', url_for(@record), nil, true
    .ui.tiny.compact.basic.buttons
      .ui.active.button
        - status = @record.published? ? (@record.has_draft? ? :pending_changes : :published) : :draft
        = translate(status, scope: :status, target: model_name)
      a.ui.button href=url_for([:edit, :admin, @record])
        i.edit.icon
        - if !@record.published?
          = translate('action.target.review', target: model_name)
        - elsif @record.has_draft?
          = translate 'action.review'
        - else
          = translate('action.target.edit', target: model_name)
      .ui.floating.dropdown.icon.button
        i.dropdown.icon
        .menu
          - if @record.has_draft?
            a.item href=url_for([:edit, :admin, @record])
              i.edit.icon
              = translate 'action.target.edit_details', target: model_name
          - if false && @record.publishable? && allow.publish?
            / TODO: Implement click to (un)publish
            .item
              i.bullhorn.icon
              = @record.published? ? t('action.target.unpublish', target: model_name) : 'Publish article'
          - if @record.published?
            a.item href=url_for(@record) target='_blank'
              i.eye.icon
              = translate 'action.show'
          - if allow.preview? && (@record.has_draft? || !@record.published?)
            a.item href=url_for([@record, preview: true]) target='_blank'
              i.eye.icon
              = translate 'action.preview'
          - if allow.destroy?
            a.item href=url_for([:admin, @record]) data={ method: 'delete', confirm: t('messages.confirm_destroy') }
              i.warning.sign.icon
              = translate 'action.target.destroy', target: model_name

.details
  h3 = @record.name
  = render "admin/details/#{@record.model_name.param_key}", record: @record

  - if @record.reviewable?
    .ui.small.details.list
      = record_detail 'bullhorn', record_published_at_status if @record.respond_to? :published_at
      = record_detail 'edit', record_modified_at_status

.clearfix

.ui.divider

.table-actions
  = table_action t('action.target.write', target: model_name), 'pencil alternate', url_for([:write, :admin, @record])
  /= table_action t('action.write'), 'pencil alternate', url_for([:write, :admin, @record])

h4 = translate 'misc.content_outline'

= content_outline JSON.parse(@record.content)['blocks'] unless @record.content.empty?

.ui.hidden.divider
= table_link t('action.target.back', target: @model.model_name.human(count: -1)), 'left arrow', url_for([:admin, @model])

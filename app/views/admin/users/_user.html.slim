
- allow = policy(user)

= render 'admin/application_resources/index_item', resource: user, viewable: false do |f|
  - unless user.new_record?
    - content_for :name, user.email, flush: true

    - content_for :meta, flush: true do
      .item
        - if not user.created_at.nil?
          i.check.circle.icon
          .content #{User.human_attribute_name(:created_at)} #{localize user.created_at, format: :short}
        - elsif user.invitation_accepted?
          i.check.circle.icon
          .content #{User.human_attribute_name(:invitation_accepted_at)} #{localize user.invitation_accepted_at, format: :short}
        - elsif not user.invitation_sent_at.nil?
          i.olive.mail.icon
          .content #{User.human_attribute_name(:invitation_sent_at)} #{localize user.invitation_sent_at, format: :short}
      - unless user.invited_by_id == nil
        .item
          i.spy.icon
          .content #{User.human_attribute_name(:invitation_by_id)} ##{user.invited_by_id}
      .item
        i.user.icon
        .content
          = human_enum_name(user, :role)
          '  -
          - if user.all_languages?
            = translate 'misc.locale.worldwide'
          - else
            = user.languages.map{|l| I18nData.languages(locale)[l.to_s.upcase]}.join(', ')

  - content_for :fields, flush: true do
    - if user.new_record?
      = f.input :email, as: :email, wrapper_html: { class: 'sub' }
    - else
      h3 = user.email

    = f.input :role, collection: @assignable_roles.map {|k, v| [human_enum_name(User, :role, k), k]}, wrapper_html: { class: 'sub' }
    = f.input :languages, collection: I18n.available_locales.collect {|l| [I18nData.languages[l.to_s.upcase], l]}, prompt: t('misc.locale.all_languages'), wrapper_html: { class: 'sub' }, input_html: { multiple: true }


- allow = policy(@city)

= render 'admin/application_pages/form', page: @city, show_title_field: false do |f|
  - country_names = I18nData.countries(locale)
  = f.input :country, collection: City.countries.map {|k, v| [country_names[k], k]}, input_html: { class: 'ui search selection dropdown' }, disabled: !allow.update_structure?

  = f.input :name, label: false do
    img.ui.right.floated.image src=image_path('admin/powered-by-google.png') style='margin: 0'
    = f.label :name
    - if allow.update_structure?
      .ui.city.search data-url=(lookup_admin_cities_path(type: 'locality') + '&q={query}')
        .ui.right.labeled.left.icon.input
          i.search.icon
          = f.text_field :name, class: 'prompt', autocomplete: 'off', placeholder: t('action.target.search_for', target: City.model_name.human)

          //- if params[:city] && params[:city][:latitude] && params[:city][:longitude]
            a#city_coordinates.ui.tag.label href=coordinates_url(params[:city][:latitude], params[:city][:longitude]) target="_blank"
              i.marker.icon
              span #{params[:city][:latitude]}, #{params[:city][:longitude]}
          //- elsif @city.latitude.present? and @city.longitude.present?

          - if @city.latitude.present? and @city.longitude.present?
            a#city_coordinates.ui.tag.label href=coordinates_url(@city.latitude, @city.longitude) target="_blank"
              i.marker.icon
              span #{@city.latitude}, #{@city.longitude}
          - else
            #city_coordinates.ui.tag.label
              i.marker.icon
              span = t('messages.not_set')

        .results

      = f.hidden_field :longitude
      = f.hidden_field :latitude
    - else
      = f.text_field :name

      - if @city.latitude.present? and @city.longitude.present?
        a#city_coordinates.ui.tag.label href=coordinates_url(@city.latitude, @city.longitude) target="_blank"
          i.marker.icon
          span #{@city.latitude}, #{@city.longitude}

  = f.input :slug, label: (@city.new_record? ? t("activerecord.attributes.#{f.object.model_name.i18n_key}.slug") : url_for(@city)), wrapper: :slug

  = f.input :attachments do
    - if @city.new_record?
      p You must save this #{City.model_name.humanize} before you can add media to it.
    - else
      #uploader data-endpoint=upload_to_admin_city_path(@city) data-files=attachments_json(@city) data-authenticity-token=form_authenticity_token

  = f.input :banner, label: false do
    = f.label :banner
    = render 'admin/application/attachment_select', f: f, field: :banner, attachments: @city.attachments

  - if allow.update_structure?
    = render 'admin/application/repeatable_fields', f: f, attribute: :contacts, items: f.object.contacts do |ff, item|
      = ff.text_field :name, value: item['name'], placeholder: City.human_attribute_name(:name), name: "#{ff.object_name}[name][]"
      = ff.text_field :url, value: item['url'], placeholder: City.human_attribute_name(:url), name: "#{ff.object_name}[url][]"
      = render 'admin/application/attachment_select', f: ff, placeholder: City.human_attribute_name(:image), name: "#{ff.object_name}[image_uuid][]", value: item['image_uuid'], attachments: @city.attachments

  - if allow.update_venues?
    = render 'admin/application/repeatable_fields', f: f, attribute: :venues, items: f.object.venues do |ff, item|
      = ff.text_field :room_information, value: item['room_information'], placeholder: City.human_attribute_name(:room_information), name: "#{ff.object_name}[room_information][]"
      = ff.hidden_field :latitude, value: item['latitude'], name: "#{ff.object_name}[latitude][]", class: 'latitude'
      = ff.hidden_field :longitude,  value: item['longitude'], name: "#{ff.object_name}[longitude][]", class: 'longitude'

      .ui.venue.search data-url=(lookup_admin_cities_path(type: '') + '&q={query}')
        .ui.right.labeled.left.icon.input
          i.search.icon
          = ff.text_field :address, class: 'prompt', autocomplete: 'off', value: item['address'], name: "#{ff.object_name}[address][]", placeholder: t('action.target.search_for', target: City.human_attribute_name(:address))

          - if item['latitude'].present? and item['longitude'].present?
            a.ui.tag.label href=coordinates_url(item['latitude'], item['longitude']) target="_blank"
              i.marker.icon
              span #{item['latitude']}, #{item['longitude']}
          - else
            .ui.tag.label
              i.marker.icon
              span = t('messages.not_set')

        .results

      //- if item['latitude'].present? and item['longitude'].present?
        a.ui.fluid.basic.label href=coordinates_url(item['latitude'], item['longitude'])
          i.marker.icon
          | #{item['latitude']}, #{item['longitude']}
      //- else
        a.ui.label
          i.marker.icon
          span = t('messages.not_set')

      .three.fields
        = ff.select :day_of_week, t('date.day_names').map.with_index {|x,i| [x,i]}, { selected: item['day_of_week'] }, { class: 'ui selection dropdown', name: "#{ff.object_name}[day_of_week][]" }
        .ui.labeled.input
          .ui.label = City.human_attribute_name(:start_time)
          = ff.time_field :start_time, value: item['start_time'], name: "#{ff.object_name}[start_time][]"
        .ui.labeled.input
          .ui.label = City.human_attribute_name(:end_time)
          = ff.time_field :end_time, value: item['end_time'], name: "#{ff.object_name}[end_time][]"
  - else
    .field
      label = City.human_attribute_name(:venues)
      - if f.object.venues.present?
        - day_names = t('date.day_names')
        .ui.divided.list
          - f.object.venues.each do |venue|
            .item
              .title #{venue['address']} (#{venue['room_information']})
              .description #{day_names[venue['day_of_week'].to_i]}, #{venue['start_time']} - #{venue['end_time']}


- section = f.object

.ui.styled.sortable.section.accordion id=dom_id(section) class="type-#{section.content_type} format-#{section.format}"
  - unless section.new_record?
    = f.hidden_field :id

  = f.hidden_field :order, class: 'sorting-order'

  .title
    //.location style="float: right" data-tooltip="Visible for All Countries" data-inverted=""
      i.teal.check.circle.outline.icon
      i.black.globe.icon

    //.location style="float: right" data-tooltip="Visible for United States" data-inverted=""
      i.teal.check.circle.outline.icon
      i.ca.flag

    //.location style="float: right" data-tooltip="Hidden for United States" data-inverted=""
      i.orange.remove.circle.outline.icon
      i.us.flag

    i.black.bars.icon.handle

    - if section.new_record?
      = Section.model_name.human
    - elsif section.title.present?
      = section.title + ' [' + human_enum_name(section, :content_type) + ']'
    - else
      = human_enum_name(section, :content_type) + ' ' + Section.model_name.human

  .content
    .form
      .field
        = f.text_field :title, placeholder: Section.human_attribute_name(:title)
      .field.content-type
        = f.label :content_type
        .ui.scrolling.selection.dropdown
          = f.hidden_field :content_type
          i.dropdown.icon
          .default.text Section.human_attribute_name(:content_type)
          .menu
            - Section.content_types.each do |k, v|
              .item data-value=k
                = content_type_icon k.to_sym
                = human_enum_name(section, :content_type, k)
      
      = f.fields_for :format do |ff|
        .field.text.format
          = ff.label :format
          = ff.select :text, Section::TEXT_FORMATS.map {|k| [human_enum_name(section, :format, k), k]}, { selected: section.format }, { class: 'ui scrolling dropdown' }

        .field.image.format
          = ff.label :format
          = ff.select :image, Section::IMAGE_FORMATS.map {|k| [human_enum_name(section, :format, k), k]}, { selected: section.format }, { class: 'ui scrolling dropdown' }

        .field.action.format
          = ff.label :format
          = ff.select :action, Section::ACTION_FORMATS.map {|k| [human_enum_name(section, :format, k), k]}, { selected: section.format }, { class: 'ui scrolling dropdown' }
        
      .field.for.text
        = f.text_field :subtitle, placeholder: Section.human_attribute_name(:subtitle)
      .field.for.text
        = f.text_area :text, placeholder: Section.human_attribute_name(:text)
      .field.for.quote.sub-quote
        = f.text_area :quote, placeholder: Section.human_attribute_name(:quote)
      .field.for.image
        .ui.fluid.icon.file.input
          i.image.icon
          = f.file_field :images, multiple: true
          = f.hidden_field :images_cache
        - if section.images.present?
          .ui.tiny.list
            - section.images.each do |image|
              a.item href=image.url = image.identifier
      .field.for.video
        = f.url_field :url, placeholder: Section.human_attribute_name(:video_url)
      .field.for.image.quote
        = f.text_field :credit, placeholder: Section.human_attribute_name(:credit)
      .field.for.quote
        = f.text_field :subtitle, placeholder: Section.human_attribute_name(:subtitle)
      .two.fields
        .field.for.button
          = f.text_field :action_text, placeholder: Section.human_attribute_name(:action_text)
        .field.for.button
          = f.url_field :url, placeholder: Section.human_attribute_name(:action_url)

      
      .fields
        .six.wide.field
          = f.label :visibility_type
          = f.select :visibility_type, Section.visibility_types.map {|k,v| [k.humanize.capitalize, k]}, {}, { class: 'ui dropdown' }
        .ten.wide.field
          = f.label :visibility_countries
          .ui.multiple.search.selection.dropdown
            // We need the raw country data for display
            = f.hidden_field :visibility_countries, value: section[:visibility_countries]
            i.dropdown.icon
            .default.text None
            .menu
              - I18nData.countries.each do |country_code, country_name|
                .item data-value=country_code.downcase
                  i.flag class=country_code.downcase
                  = country_name

    - if section.new_record?
      .ui.tiny.compact.basic.labeled.icon.button.remove-section-button
        i.trash.icon
        = translate 'action.target.remove', target: Section.model_name.human
    - else
      .ui.checkbox
        = f.check_box :_destroy, class: 'delete-section'
        = f.label :delete_section, t('action.target.destroy', target: Section.model_name.human)

    .clearfix
